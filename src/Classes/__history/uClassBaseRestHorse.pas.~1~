unit uClassBaseRestHorse;

interface

uses
   REST.Client,
   REST.Authenticator.Basic,
   IPPeerClient,
   REST.Types,
   System.Classes,
   System.SysUtils, model.entity.devedor_acionamento, uxRots, udDB;
type

TClasseRest = class
private
    FCliente: TRESTClient;
    FRequeste: TRESTRequest;
    FResponse: TRESTResponse;
    FAutenticar: THTTPBasicAuthenticator;
    FBaseUrl: string;
    FMetodo: TRESTRequestMethod;
    FExecName: string;
    FEntityDevedorAcionamento: TEntityDevedorAcionamento;
    FUsuarioId: string;
    FCobradorId: integer;
    FAssessoriaId: integer;
    FAcaoID: integer;
    FDevedorId: integer;
    FContID: integer;
    FMensagemAcao: string;
    FPassWord: string;
    FUserName: string;
    FAcaoNome: string;
    FAcaoFone: string;
    FResource: string;
  { private declarations }
public
  { public declarations }

  property Cliente: TRESTClient read FCliente write FCliente;
  property Requeste: TRESTRequest read FRequeste write FRequeste;
  property Response: TRESTResponse read FResponse write FResponse;
  property Autenticar: THTTPBasicAuthenticator read FAutenticar write FAutenticar;
  property BaseUrl: string read FBaseUrl write FBaseUrl;
  property Metodo: TRESTRequestMethod read FMetodo write FMetodo;
  property ExecName: string read FExecName write FExecName;
  property UserName: string read FUserName write FUserName;
  property PassWord: string read FPassWord write FPassWord;
  property EntityDevedorAcionamento: TEntityDevedorAcionamento read FEntityDevedorAcionamento write FEntityDevedorAcionamento;
  property AcaoID: integer read FAcaoID write FAcaoID;
  property MensagemAcao: string read FMensagemAcao write FMensagemAcao;
  property ContID: integer read FContID write FContID;
  property DevedorId: integer read FDevedorId write FDevedorId;
  property CobradorId: integer read FCobradorId write FCobradorId;
  property UsuarioId: string read FUsuarioId write FUsuarioId;
  property AssessoriaId: integer read FAssessoriaId write FAssessoriaId;
  property AcaoNome: string read FAcaoNome write FAcaoNome;
  property AcaoFone: string read FAcaoFone write FAcaoFone;
  property Resource: string read FResource write FResource;

  constructor create; virtual;
  destructor Destroy; override;

  procedure ConfigurarAmbiente; virtual;
  procedure prIncluiAcionamento; virtual;
  procedure getAcaoId; virtual;

  procedure prGravarJson(stNomeArquivo, stDestino, stJson: string); virtual;
  procedure prGravarXML(stNomeArquivo, stDestino, stJson: string); virtual;

end;

implementation

{ TClasseRest }

procedure TClasseRest.ConfigurarAmbiente;
begin
  with FCliente do
  begin
    Accept        := 'application/json, text/plain; q=0.9, text/html;q=0.8,';
    AcceptCharset := 'UTF-8, *;q=0.8';
    BaseURL       := FBaseUrl;
    ContentType   := 'application/json';
  end;

  with FRequeste do
  begin
    Accept   := 'application/json, text/plain; q=0.9, text/html;q=0.8,';
    Client   := FCliente;
    Method   := FMetodo;
    Response := FResponse;
    Timeout  := 100000;
  end;

end;

constructor TClasseRest.create;
begin
  FCliente    := TRESTClient.Create(nil);
  FRequeste   := TRESTRequest.Create(nil);
  FResponse   := TRESTResponse.Create(nil);
  FAutenticar := THTTPBasicAuthenticator.Create(nil);
  FEntityDevedorAcionamento := TEntityDevedorAcionamento.create;
end;


destructor TClasseRest.Destroy;
begin
  FCliente.Free;
  FRequeste.Free;
  FResponse.Free;
  FAutenticar.Free;
  FEntityDevedorAcionamento.Free;
  inherited;
end;

procedure TClasseRest.getAcaoId;
begin
  with dm.quX, dm.quX.sql do
  begin
     Close;
     SQL.Clear;
     Add('SELECT sc.situacao_id, a.acao_id');
     Add('FROM tbsituacao_cobranca sc');
     Add('INNER JOIN tbacao_cobranca a on sc.situacao_id = a.situacao_id');
     Add('AND   a.se_ativo = ''S''');
     Add('WHERE a.descricao like :tipo_envio');
     Add('AND   cont_id =:cont_id');
     Parameters.ParamByName('tipo_envio').Value := '%API%';
     if FAcaoNome <> '' then
       Parameters.ParamByName('tipo_envio').Value := '%'+FAcaoNome+'%';

     Parameters.ParamByName('CONT_ID').Value    := FContId;
     Open;
     FAcaoID := fieldByName('ACAO_ID').AsInteger;
  end;

end;

procedure TClasseRest.prGravarJson(stNomeArquivo, stDestino, stJson: string);
var
 JsonArquivo: TStringList;
begin
  if Length(stJson) > 0 then
  begin
    try
      JsonArquivo := TStringList.Create;
      JsonArquivo.Add(stJson);
      if not DirectoryExists(FExecName+'Json') then
         ForceDirectories(FExecName+'Json');

      JsonArquivo.SaveToFile(FExecName+'Json\'+stNomeArquivo + FormatDateTime('ddmmyyyy',Date)+'_'+FormatDateTime('hhmmss',Time)+'.json');
    finally
      JsonArquivo.Free;
    end;
  end;
end;

procedure TClasseRest.prGravarXML(stNomeArquivo, stDestino, stJson: string);
var
 Xml: TStringList;
begin
  if Length(stJson) > 0 then
  begin
    try
      Xml := TStringList.Create;
      Xml.Add(stJson);
      if not DirectoryExists(FExecName+'WS') then
         ForceDirectories(FExecName+'WS');

      Xml.SaveToFile(FExecName+'WS\'+stNomeArquivo + FormatDateTime('ddmmyyyy',Date)+'_'+FormatDateTime('hhmmss',Time)+'.XML');
    finally
      Xml.Free;
    end;
  end;
end;

procedure TClasseRest.prIncluiAcionamento;
begin
  getAcaoId;
  with FEntityDevedorAcionamento.tbDevedor_Acionamento do
  begin
      DATA             := fmxRots.fcDataAtua;
      ACAO_ID          := FAcaoID;
      MENSAGEM         := FMensagemAcao;
      FONE             := AcaoFone;
      DEVEDOR_ID       := FDevedorId;
      COBRADOR_ID      := FCobradorId;
      USUARIO_INCLUSAO := FUsuarioId;
      CONT_ID          := FContId;
      ASSESSORIA_ID    := FAssessoriaId;
      SE_SMS           := false;

      EntityDevedorAcionamento.Insert;
  end;

end;

end.
